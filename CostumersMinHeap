public class CustomersMinHeap implements Cloneable {
    private Customer[] arr;
    private int maxSize;

    public CustomersMinHeap(int capacity) {
        arr = new Customer[capacity];
    }

    public boolean isEmpty() {
        return maxSize == 0;
    }

    public Customer top() {
        if (isEmpty()) {
            throw new IllegalStateException("Heap is empty");
        }
        return arr[0];
    }

    public void insert(Customer customer) {
        if (maxSize == arr.length) {
            throw new IllegalStateException("Heap is full");
        }

        arr[maxSize] = customer;
        int current = maxSize;
        maxSize++;

        while (current != 0 && arr[current].getArrival().isBefore(arr[parent(current)].getArrival())) {
            swap(current, parent(current));
            current = parent(current);
        }
    }

    public Customer removeMin() {
        Customer min = top();
        arr[0] = arr[maxSize - 1];
        maxSize--;
        heapify(0);
        return min;
    }

    private void heapify(int index) {
        int left = left(index);
        int right = right(index);
        int smallest = index;

        if (left < maxSize && arr[left].getArrival().isBefore(arr[smallest].getArrival())) {
            smallest = left;
        }

        if (right < maxSize && arr[right].getArrival().isBefore(arr[smallest].getArrival())) {
            smallest = right;
        }

        if (smallest != index) {
            swap(index, smallest);
            heapify(smallest);
        }
    }

    private int parent(int index) {
        return (index - 1) / 2;
    }

    private int left(int index) {
        return 2 * index + 1;
    }

    private int right(int index) {
        return 2 * index + 2;
    }

    private void swap(int i, int j) {
        Customer temp = arr[i];
        arr[i] = arr[j];
        arr[j] = temp;
    }
    public CustomersMinHeap clone() throws CloneNotSupportedException {
        return (CustomersMinHeap) super.clone();
    }


}
