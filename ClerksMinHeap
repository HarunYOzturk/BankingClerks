public class ClerksMinHeap implements Cloneable {
    private Clerk[] arr;
    private int capacity;
    int size = 0;


    public ClerksMinHeap(int capacity) {
        arr = new Clerk[capacity];
    }

    //method to check if heap is emoty
    public boolean isEmpty() {
        return capacity == 0;
    }

    //method to return top or min
    public Clerk top() {
        if (isEmpty()) {
            System.out.println("Heap is empty");
        }

        return arr[0];
    }

    //method for inserting clerks
    public void add(Clerk clerk) {
        size++;
        if (capacity == arr.length) {
            System.out.println("Heap is full");
        }

        // insert into the heap
        arr[capacity] = clerk;
        int current = capacity;
        capacity++;
        // swap until satisfied
        while (current != 0 && arr[current].getAvailableTime().isBefore(arr[parent(current)].getAvailableTime())) {
            swap(current, parent(current));
            current = parent(current);
        }
    }

    //method to remove min
    public Clerk removeTop() {
        size--;
        Clerk min = top();
        arr[0] = arr[capacity - 1];
        capacity--;
        //heapify to make it minheap
        heapify(0);
        return min;
    }

    //method to fix minheap
    private void heapify(int i) {
        int left = left(i);
        int right = right(i);
        int minimum = i;

        //search for min
        if (left < capacity && arr[left].getAvailableTime().isBefore(arr[minimum].getAvailableTime())) {
            minimum = left;
        }
        ///search for min
        if (right < capacity && arr[right].getAvailableTime().isBefore(arr[minimum].getAvailableTime())) {
            minimum = right;
        }

        if (minimum != i) {
            //swap and heapify
            swap(i, minimum);
            heapify(minimum);
        }
    }
    //get parent
    private int parent(int index) {
        return (index - 1) / 2;
    }
    //get left child
    private int left(int index) {
        return 2 * index + 1;
    }
    //get right child
    private int right(int index) {
        return 2 * index + 2;
    }
    //swap method
    private void swap(int i, int j) {
        Clerk temp = arr[i];
        arr[i] = arr[j];
        arr[j] = temp;
    }
    // return size
    public int size(){
        return size;
    }


}
