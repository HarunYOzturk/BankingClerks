public class ClerksMinHeap implements Cloneable {
    private Clerk[] heap;
    private int maxSize;

    public ClerksMinHeap(int capacity) {
        heap = new Clerk[capacity];
    }

    public boolean isEmpty() {
        return maxSize == 0;
    }

    public Clerk top() {
        if (isEmpty()) {
            throw new IllegalStateException("Heap is empty");
        }
        return heap[0];
    }

    public void insert(Clerk clerk) { 
        if (maxSize == heap.length) {
            throw new IllegalStateException("Heap is full");
        }

        heap[maxSize] = clerk;
        int current = maxSize;
        maxSize++;

        while (current != 0 && heap[current].getAvailable().isBefore(heap[parent(current)].getAvailable())) {
            swap(current, parent(current));
            current = parent(current);
        }
    }

    public Clerk removeMin() {
        Clerk min = top();
        heap[0] = heap[maxSize - 1];
        maxSize--;
        minHeapify(0);
        return min;
    }

    private void minHeapify(int index) {
        int left = left(index);
        int right = right(index);
        int smallest = index;

        if (left < maxSize && heap[left].getAvailable().isBefore(heap[smallest].getAvailable())) {
            smallest = left;
        }

        if (right < maxSize && heap[right].getAvailable().isBefore(heap[smallest].getAvailable())) {
            smallest = right;
        }

        if (smallest != index) {
            swap(index, smallest);
            minHeapify(smallest);
        }
    }

    private int parent(int index) {
        return (index - 1) / 2;
    }

    private int left(int index) {
        return 2 * index + 1;
    }

    private int right(int index) {
        return 2 * index + 2;
    }

    private void swap(int i, int j) {
        Clerk temp = heap[i];
        heap[i] = heap[j];
        heap[j] = temp;
    }
}
